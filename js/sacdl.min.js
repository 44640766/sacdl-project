var Utils=function(){function e(e,n){for(var a in n)"undefined"==typeof e[a]&&(e[a]=n[a])}var n,a=[];return{init:function(e){n=e},getBarData:function(){var e=this.getTreeData(),n=e.children,a={labels:[],series:[]},r=[];return n.forEach(function(e){a.labels.push(e.name),r.push(e.children.length)}),a.series.push({label:"Projects count",values:r}),a},getTreeData:function(){var r={};if(e(n,{name:"languages",children:[]}),n&&n.items){a=n.items,a.forEach(function(e,n){"undefined"==typeof r[e.language]&&(r[e.language]=n)});for(var t in r){var i={name:t,children:[]};a.forEach(function(e,n){var a={name:e.full_name,watchers_count:e.watchers_count,forks_count:e.forks_count,size:0};e.language===t&&i.children.push(a)}),n.children.push(i)}}return delete n.items,n}}}();
var Bar=function(){function t(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)g.push(t.series[r].values[e])}function e(){g=[],a=Utils.getBarData(),i=l*a.series.length,t(a);var e=d3.scale.category20(),r=l*g.length+c*a.labels.length,h=d3.scale.linear().domain([0,d3.max(g)]).range([0,s]),u=d3.scale.linear().range([r+c,0]);n=d3.svg.axis().scale(u).tickFormat("").tickSize(0).orient("left");var f=chart.attr("width",o+s+d).attr("height",r),p=f.selectAll("g").data(g),x=p.enter().append("g").attr("transform",function(t,e){return"translate("+o+","+(e*l+c*(.5+Math.floor(e/a.series.length)))+")"});x.append("rect").attr("fill",function(t,r){return e(r%a.series.length)}).attr("class","bar").attr("width",h).attr("height",l-1),x.append("text").attr("x",function(t){return h(t)-3}).attr("y",l/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),x.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",i/2).attr("dy",".35em").text(function(t,e){return e%a.series.length===0?a.labels[Math.floor(e/a.series.length)]:""}),p.exit().transition().style({opacity:0}).remove(),f.append("g").attr("class","y axis").attr("transform","translate("+o+", "+-c/2+")").call(n);var v=18,b=4,y=f.selectAll(".legend").data(a.series),m=y.enter().append("g").attr("transform",function(t,e){var r=v+b,a=-c/2,n=o+s+40-v,l=e*r-a;return"translate("+n+","+l+")"});m.append("rect").attr("width",v).attr("height",v).style("fill",function(t,r){return e(r)}).style("stroke",function(t,r){return e(r)}),m.append("text").attr("class","legend").attr("x",v+b).attr("y",v-b).text(function(t){return t.label}),y.exit().remove()}var r,a,n,s=300,l=20,i=0,c=10,o=150,d=150,g=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){r=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(r).append("svg:svg").attr("class","chart")},show:function(){e()}}}();
var Treemap=function(){function t(t){c=a=[],c=a=Utils.getTreeData(t);var u=i.nodes(a).filter(function(t){return!t.children}),o=s.selectAll("g").data(u).enter().append("svg:g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return r(c==t.parent?a:t.parent)});o.append("svg:rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return f(t.parent.name)}),o.append("svg:text").attr("x",function(t){return t.dx/2}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name+" "+t.watchers_count}).style("opacity",function(t){return t.w=this.getComputedTextLength(),t.dx>t.w?1:0}),d3.select(window).on("click",function(){r(a)}),d3.select("#treemapSelect").on("change",function(){i.value("watchers"==this.value?e:n).nodes(a),r(c)})}function e(t){return t.watchers_count}function n(t){return t.forks_count}function r(t){var e=u/t.dx,n=o/t.dy;d.domain([t.x,t.x+t.dx]),l.domain([t.y,t.y+t.dy]);var r=s.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+d(t.x)+","+l(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return e*t.dx/2}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return e*t.dx>t.w?1:0}),c=t,d3.event.stopPropagation()}var a,c,i,s,u=970,o=500,d=d3.scale.linear().range([0,u]),l=d3.scale.linear().range([0,o]),f=d3.scale.category20c();return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),i=d3.layout.treemap().round(!1).size([u,o]).sticky(!0).value(function(t){return t.watchers_count}),s=d3.select(t).append("div").attr("class","chart").style("width",u+"px").style("height",o+"px").append("svg:svg").attr("width",u).attr("height",o).append("svg:g").attr("transform","translate(.5,.5)")},show:function(e){t(e)}}}();
!function(){function e(e){var i=setTimeout(function(){t.style.display="block"},300);d3.json(e,function(e,a){e&&(clearTimeout(i),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.init(a),Bar.show(),Treemap.show(),clearTimeout(i),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),e("https://api.github.com/search/repositories?q=bitcoin")}();
var Searcher=function(){function t(){var t=e.property("value")||c.q;return s=r+c.type+"?q="+t+"&sort="+c.sort+"&order="+c.order,console.log(s),s}var r,e,o,s="",n=[],c={type:"repositories",q:"bitcoin",sort:"stars",order:"desc"};return{settings:{baseApiUrl:"https://api.github.com/search/"},init:function(){e=d3.select("#search-input"),o=d3.select("#search-btn"),r=this.settings.baseApiUrl,o.on("click",function(){t(),n.forEach(function(t){try{t(s)}catch(r){console.log(r)}})})},addListener:function(t){n.push(t)}}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwiYmFyLmpzIiwidHJlZW1hcC5qcyIsImFwcC5qcyIsInNlYXJjaGVyLmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwibWVyZ2VUbyIsInRvIiwiZnJvbSIsImtleSIsImRhdGFTZXQiLCJpdGVtcyIsImluaXQiLCJkYXRhIiwiZ2V0QmFyRGF0YSIsInRyZWVEYXRhIiwidGhpcyIsImdldFRyZWVEYXRhIiwiY2hpbGRyZW4iLCJyZXN1bHQiLCJsYWJlbHMiLCJzZXJpZXMiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJuYW1lIiwibGVuZ3RoIiwibGFiZWwiLCJsYW5ndWFnZXMiLCJpbmRleCIsImxhbmd1YWdlIiwicm9vdCIsImNoaWxkIiwiZnVsbF9uYW1lIiwid2F0Y2hlcnNfY291bnQiLCJmb3Jrc19jb3VudCIsInNpemUiLCJCYXIiLCJ6aXBwaW5nRGF0YSIsImkiLCJqIiwiemlwcGVkRGF0YSIsInNob3dCYXIiLCJncm91cEhlaWdodCIsImJhckhlaWdodCIsImNvbG9yIiwiZDMiLCJzY2FsZSIsImNhdGVnb3J5MjAiLCJjaGFydEhlaWdodCIsImdhcEJldHdlZW5Hcm91cHMiLCJ4IiwibGluZWFyIiwiZG9tYWluIiwibWF4IiwicmFuZ2UiLCJjaGFydFdpZHRoIiwieSIsInlBeGlzIiwic3ZnIiwiYXhpcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZSIsIm9yaWVudCIsImNoYXJ0IiwiYXR0ciIsInNwYWNlRm9yTGFiZWxzIiwic3BhY2VGb3JMZWdlbmQiLCJiYXJOb2RlcyIsInNlbGVjdEFsbCIsImJhciIsImVudGVyIiwiYXBwZW5kIiwiZCIsIk1hdGgiLCJmbG9vciIsInRleHQiLCJleGl0IiwidHJhbnNpdGlvbiIsInN0eWxlIiwib3BhY2l0eSIsInJlbW92ZSIsImNhbGwiLCJsZWdlbmRSZWN0U2l6ZSIsImxlZ2VuZFNwYWNpbmciLCJsZWdlbmREYXRhIiwibGVnZW5kIiwiaGVpZ2h0Iiwib2Zmc2V0IiwiaG9yeiIsInZlcnQiLCJiYXJJZCIsInNldHRpbmdzIiwidGl0bGUiLCJkZXNjIiwic2VsZWN0Iiwic2hvdyIsIlRyZWVtYXAiLCJzaG93Q2hhcnQiLCJub2RlIiwibm9kZXMiLCJ0cmVlbWFwIiwiZmlsdGVyIiwiY2VsbCIsIm9uIiwiem9vbSIsInBhcmVudCIsImR4IiwiZHkiLCJ3IiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwid2luZG93IiwidmFsdWUiLCJjb3VudCIsImt4Iiwia3kiLCJoIiwidCIsImR1cmF0aW9uIiwiZXZlbnQiLCJhbHRLZXkiLCJzdG9wUHJvcGFnYXRpb24iLCJjYXRlZ29yeTIwYyIsInRyZWVtYXBJZCIsImxheW91dCIsInJvdW5kIiwic3RpY2t5IiwidXJsIiwibG9hZGVyIiwic2V0VGltZW91dCIsImxvYWRpbmciLCJkaXNwbGF5IiwianNvbiIsImVyciIsImNsZWFyVGltZW91dCIsImFsZXJ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIlNlYXJjaGVyIiwicGFyc2VRdWVyeSIsInEiLCJpbnB1dFR4dCIsInByb3BlcnR5IiwicXVlcnkiLCJiYXNlQXBpVXJsIiwiY29uc29sZSIsImxvZyIsInNlYXJjaEJ0biIsImxpc3RlbmVycyIsInR5cGUiLCJzb3J0Iiwib3JkZXIiLCJsaXN0ZW5lciIsImVycm9yIiwiYWRkTGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLE9BQVMsV0F5R1QsUUFBU0MsR0FBUUMsRUFBSUMsR0FDakIsSUFBSyxHQUFJQyxLQUFPRCxHQUNXLG1CQUFaRCxHQUFHRSxLQUNWRixFQUFHRSxHQUFPRCxFQUFLQyxJQTNHM0IsR0FBSUMsR0FDQUMsSUFFSixRQUVJQyxLQUFNLFNBQVNDLEdBQ1hILEVBQVVHLEdBZ0JkQyxXQUFZLFdBQ1IsR0FBSUMsR0FBV0MsS0FBS0MsY0FDaEJOLEVBQVFJLEVBQVNHLFNBQ2pCQyxHQUNJQyxVQUNBQyxXQUVKQyxJQVlKLE9BVkFYLEdBQU1ZLFFBQVEsU0FBU0MsR0FDbkJMLEVBQU9DLE9BQU9LLEtBQUtE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Q3ZCLElBQ0lBLEVBQVN6QixHQUNYLE1BQU8wQixHQUNMUixRQUFRQyxJQUFJTyxTQU01QkMsWUFBYSxTQUFTRixHQUNsQkosRUFBVTVILEtBQUtnSSIsImZpbGUiOiJzYWNkbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGFTZXQsXG4gICAgICAgIGl0ZW1zID0gW107XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGFTZXQgPSBkYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgRGF0YSBmb3JtYXQ6XG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsczogW1xuICAgICAgICAgICAgICAgICdjL2MrKycsICdweXRob24nLCAnamF2YXNjcmlwdCcsXG4gICAgICAgICAgICAgICAgJ2phdmEnLCAncnVieScsICdodG1sJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Byb2plY3RzIGNvdW50JyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IFs0LCA4LCAxNSwgMTYsIDIzLCA0Ml0gLy9jb3VudHNcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICAgICAgKi9cbiAgICAgICAgZ2V0QmFyRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHJlZURhdGEgPSB0aGlzLmdldFRyZWVEYXRhKCk7IC8vb3IgZGF0YVNldFxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdHJlZURhdGEuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IFtdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcblxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmxhYmVscy5wdXNoKGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goaXRlbS5jaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmVzdWx0LnNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Byb2plY3RzIGNvdW50JyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogRGF0YSBmb3JtYXQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImxhbmd1YWdlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJqYXZhc2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1mbHkvbXlJREVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndhdGNoZXJzX2NvdW50XCI6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcmtzX2NvdW50XCI6IDUwIFwic2l6ZVwiOiAyMFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgKi9cblxuICAgICAgICBnZXRUcmVlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2VzID0ge307XG5cbiAgICAgICAgICAgIG1lcmdlVG8oZGF0YVNldCwge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImxhbmd1YWdlc1wiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW11cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoZGF0YVNldCAmJiBkYXRhU2V0Lml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMgPSBkYXRhU2V0Lml0ZW1zO1xuXG4gICAgICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhbmd1YWdlc1tpdGVtLmxhbmd1YWdlXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2l0ZW0ubGFuZ3VhZ2VdID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGxhbmd1YWdlIGluIGxhbmd1YWdlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBsYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW11cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IGl0ZW0uZnVsbF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2F0Y2hlcnNfY291bnRcIjogaXRlbS53YXRjaGVyc19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcmtzX2NvdW50XCI6IGl0ZW0uZm9ya3NfY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmxhbmd1YWdlID09PSBsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3QuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIGRhdGFTZXQuY2hpbGRyZW4ucHVzaChyb290KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhU2V0Lml0ZW1zO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFTZXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL3Byb3ZpdGUgbWV0aG9kc1xuICAgIGZ1bmN0aW9uIG1lcmdlVG8odG8sIGZyb20pIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9ba2V5XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufSgpKVxuIiwidmFyIEJhciA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hhcnRXaWR0aCA9IDMwMCxcbiAgICAgICAgYmFySGVpZ2h0ID0gMjAsXG4gICAgICAgIGdyb3VwSGVpZ2h0ID0gMCxcbiAgICAgICAgZ2FwQmV0d2Vlbkdyb3VwcyA9IDEwLFxuICAgICAgICBzcGFjZUZvckxhYmVscyA9IDE1MCxcbiAgICAgICAgc3BhY2VGb3JMZWdlbmQgPSAxNTAsXG4gICAgICAgIGJhcklkLFxuICAgICAgICBzdmcsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHlBeGlzO1xuXG4gICAgLy8gWmlwIHRoZSBzZXJpZXMgZGF0YSB0b2dldGhlciAoZmlyc3QgdmFsdWVzLCBzZWNvbmQgdmFsdWVzLCBldGMuKVxuICAgIHZhciB6aXBwZWREYXRhID0gW107XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgdGl0bGU6IFwiYmFyVGl0bGVcIixcbiAgICAgICAgICAgIGRlc2M6IFwiYmFyRGVzY1wiLFxuICAgICAgICAgICAgYmFySWQ6IFwiI2JhcklkXCJcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJhcklkID0gdGhpcy5zZXR0aW5ncy5iYXJJZDtcblxuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI2JhclRpdGxlXCIpLnRleHQodGhpcy5zZXR0aW5ncy50aXRsZSk7XG4gICAgICAgICAgICBkMy5zZWxlY3QoXCIjYmFyRGVzY1wiKS50ZXh0KHRoaXMuc2V0dGluZ3MuZGVzYyk7XG5cbiAgICAgICAgICAgIC8vIFNwZWNpZnkgdGhlIGNoYXJ0IGFyZWEgYW5kIGRpbWVuc2lvbnNcbiAgICAgICAgICAgIGNoYXJ0ID0gZDMuc2VsZWN0KGJhcklkKS5hcHBlbmQoXCJzdmc6c3ZnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QmFyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6aXBwaW5nRGF0YShkYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5zZXJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB6aXBwZWREYXRhLnB1c2goZGF0YS5zZXJpZXNbal0udmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dCYXIoKSB7XG4gICAgICAgIC8vY2xlYW4gZGF0YTtcbiAgICAgICAgemlwcGVkRGF0YSA9IFtdO1xuXG4gICAgICAgIGRhdGEgPSBVdGlscy5nZXRCYXJEYXRhKCk7XG4gICAgICAgIGdyb3VwSGVpZ2h0ID0gYmFySGVpZ2h0ICogZGF0YS5zZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgIHppcHBpbmdEYXRhKGRhdGEpO1xuXG4gICAgICAgIC8vIENvbG9yIHNjYWxlXG4gICAgICAgIHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MjAoKTtcbiAgICAgICAgdmFyIGNoYXJ0SGVpZ2h0ID0gYmFySGVpZ2h0ICogemlwcGVkRGF0YS5sZW5ndGggKyBnYXBCZXR3ZWVuR3JvdXBzICogZGF0YS5sYWJlbHMubGVuZ3RoO1xuXG4gICAgICAgIHZhciB4ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oWzAsIGQzLm1heCh6aXBwZWREYXRhKV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGNoYXJ0V2lkdGhdKTtcblxuICAgICAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAucmFuZ2UoW2NoYXJ0SGVpZ2h0ICsgZ2FwQmV0d2Vlbkdyb3VwcywgMF0pO1xuXG4gICAgICAgIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgLnNjYWxlKHkpXG4gICAgICAgICAgICAudGlja0Zvcm1hdCgnJylcbiAgICAgICAgICAgIC50aWNrU2l6ZSgwKVxuICAgICAgICAgICAgLm9yaWVudChcImxlZnRcIik7XG5cbiAgICAgICAgdmFyIHN2ZyA9IGNoYXJ0XG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNwYWNlRm9yTGFiZWxzICsgY2hhcnRXaWR0aCArIHNwYWNlRm9yTGVnZW5kKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnRIZWlnaHQpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgbm9kZXNcbiAgICAgICAgdmFyIGJhck5vZGVzID0gc3ZnLnNlbGVjdEFsbChcImdcIilcbiAgICAgICAgICAgIC5kYXRhKHppcHBlZERhdGEpXG5cbiAgICAgICAgLy8gQ3JlYXRlIGJhcnNcbiAgICAgICAgdmFyIGJhciA9IGJhck5vZGVzXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBzcGFjZUZvckxhYmVscyArIFwiLFwiICsgKGkgKiBiYXJIZWlnaHQgKyBnYXBCZXR3ZWVuR3JvdXBzICogKDAuNSArIE1hdGguZmxvb3IoaSAvIGRhdGEuc2VyaWVzLmxlbmd0aCkpKSArIFwiKVwiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHJlY3RhbmdsZXMgb2YgdGhlIGNvcnJlY3Qgd2lkdGhcbiAgICAgICAgYmFyLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yKGkgJSBkYXRhLnNlcmllcy5sZW5ndGgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJcIilcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGJhckhlaWdodCAtIDEpO1xuXG4gICAgICAgIC8vIEFkZCB0ZXh0IGxhYmVsIGluIGJhclxuICAgICAgICBiYXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geChkKSAtIDM7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGJhckhlaWdodCAvIDIpXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJyZWRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRHJhdyBsYWJlbHNcbiAgICAgICAgYmFyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEwO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBncm91cEhlaWdodCAvIDIpXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSAlIGRhdGEuc2VyaWVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzW01hdGguZmxvb3IoaSAvIGRhdGEuc2VyaWVzLmxlbmd0aCldO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIERlbGV0ZSB0aGUgZXh0cmEgbm9kZXNcbiAgICAgICAgYmFyTm9kZXMuZXhpdCgpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ5IGF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgc3BhY2VGb3JMYWJlbHMgKyBcIiwgXCIgKyAtZ2FwQmV0d2Vlbkdyb3VwcyAvIDIgKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKHlBeGlzKTtcblxuICAgICAgICAvLyBEcmF3IGxlZ2VuZFxuICAgICAgICB2YXIgbGVnZW5kUmVjdFNpemUgPSAxOCxcbiAgICAgICAgICAgIGxlZ2VuZFNwYWNpbmcgPSA0O1xuXG4gICAgICAgIHZhciBsZWdlbmREYXRhID0gc3ZnLnNlbGVjdEFsbCgnLmxlZ2VuZCcpXG4gICAgICAgICAgICAuZGF0YShkYXRhLnNlcmllcyk7XG5cbiAgICAgICAgdmFyIGxlZ2VuZCA9IGxlZ2VuZERhdGFcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGxlZ2VuZFJlY3RTaXplICsgbGVnZW5kU3BhY2luZztcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gLWdhcEJldHdlZW5Hcm91cHMgLyAyO1xuICAgICAgICAgICAgICAgIHZhciBob3J6ID0gc3BhY2VGb3JMYWJlbHMgKyBjaGFydFdpZHRoICsgNDAgLSBsZWdlbmRSZWN0U2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgdmVydCA9IGkgKiBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGhvcnogKyAnLCcgKyB2ZXJ0ICsgJyknO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGVnZW5kLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRSZWN0U2l6ZSlcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRSZWN0U2l6ZSlcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoaSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yKGkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGVnZW5kLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kJylcbiAgICAgICAgICAgIC5hdHRyKCd4JywgbGVnZW5kUmVjdFNpemUgKyBsZWdlbmRTcGFjaW5nKVxuICAgICAgICAgICAgLmF0dHIoJ3knLCBsZWdlbmRSZWN0U2l6ZSAtIGxlZ2VuZFNwYWNpbmcpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubGFiZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBsZWdlbmREYXRhLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG59KCkpXG4iLCJ2YXIgVHJlZW1hcCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IDk3MCxcbiAgICAgICAgaCA9IDUwMCxcbiAgICAgICAgeCA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFswLCB3XSksXG4gICAgICAgIHkgPSBkMy5zY2FsZS5saW5lYXIoKS5yYW5nZShbMCwgaF0pLFxuICAgICAgICBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MjBjKCksXG4gICAgICAgIHJvb3QsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHRyZWVtYXAsXG4gICAgICAgIHN2ZztcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICB0aXRsZTogXCJ0cmVlbWFwVGl0bGVcIixcbiAgICAgICAgICAgIGRlc2M6IFwidHJlZW1hcERlc2NcIixcbiAgICAgICAgICAgIHRyZWVtYXBJZDogXCIjdHJlZW1hcElkXCJcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0cmVlbWFwSWQgPSB0aGlzLnNldHRpbmdzLnRyZWVtYXBJZDtcblxuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI3RyZWVtYXBUaXRsZVwiKS50ZXh0KHRoaXMuc2V0dGluZ3MudGl0bGUpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI3RyZWVtYXBEZXNjXCIpLnRleHQodGhpcy5zZXR0aW5ncy5kZXNjKTtcblxuICAgICAgICAgICAgdHJlZW1hcCA9IGQzLmxheW91dC50cmVlbWFwKClcbiAgICAgICAgICAgICAgICAucm91bmQoZmFsc2UpXG4gICAgICAgICAgICAgICAgLnNpemUoW3csIGhdKVxuICAgICAgICAgICAgICAgIC5zdGlja3kodHJ1ZSlcbiAgICAgICAgICAgICAgICAudmFsdWUoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC53YXRjaGVyc19jb3VudDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KHRyZWVtYXBJZCkuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgdyArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgaCArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwic3ZnOnN2Z1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJzdmc6Z1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC41LC41KVwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBzaG93Q2hhcnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93Q2hhcnQoZGF0YSkge1xuICAgICAgICBub2RlID0gcm9vdCA9IFtdO1xuICAgICAgICBub2RlID0gcm9vdCA9IFV0aWxzLmdldFRyZWVEYXRhKGRhdGEpO1xuXG4gICAgICAgIHZhciBub2RlcyA9IHRyZWVtYXAubm9kZXMocm9vdClcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhZC5jaGlsZHJlbjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjZWxsID0gc3ZnLnNlbGVjdEFsbChcImdcIilcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwic3ZnOmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjZWxsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHpvb20obm9kZSA9PSBkLnBhcmVudCA/IHJvb3QgOiBkLnBhcmVudCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjZWxsLmFwcGVuZChcInN2ZzpyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5keCAtIDE7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmR5IC0gMTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoZC5wYXJlbnQubmFtZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjZWxsLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmR4IC8gMjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmR5IC8gMjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5uYW1lICsgXCIgXCIgKyBkLndhdGNoZXJzX2NvdW50O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGQudyA9IHRoaXMuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuZHggPiBkLncgPyAxIDogMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGQzLnNlbGVjdCh3aW5kb3cpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB6b29tKHJvb3QpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkMy5zZWxlY3QoXCIjdHJlZW1hcFNlbGVjdFwiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyZWVtYXAudmFsdWUodGhpcy52YWx1ZSA9PSBcIndhdGNoZXJzXCIgPyBzaXplIDogY291bnQpLm5vZGVzKHJvb3QpO1xuICAgICAgICAgICAgem9vbShub2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2l6ZShkKSB7XG4gICAgICAgIHJldHVybiBkLndhdGNoZXJzX2NvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvdW50KGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZm9ya3NfY291bnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gem9vbShkKSB7XG4gICAgICAgIHZhciBreCA9IHcgLyBkLmR4LFxuICAgICAgICAgICAga3kgPSBoIC8gZC5keTtcbiAgICAgICAgeC5kb21haW4oW2QueCwgZC54ICsgZC5keF0pO1xuICAgICAgICB5LmRvbWFpbihbZC55LCBkLnkgKyBkLmR5XSk7XG5cbiAgICAgICAgdmFyIHQgPSBzdmcuc2VsZWN0QWxsKFwiZy5jZWxsXCIpLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKGQzLmV2ZW50LmFsdEtleSA/IDc1MDAgOiA3NTApXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChkLngpICsgXCIsXCIgKyB5KGQueSkgKyBcIilcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHQuc2VsZWN0KFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGt4ICogZC5keCAtIDE7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBreSAqIGQuZHkgLSAxO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB0LnNlbGVjdChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGt4ICogZC5keCAvIDI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga3kgKiBkLmR5IC8gMjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga3ggKiBkLmR4ID4gZC53ID8gMSA6IDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBub2RlID0gZDtcbiAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG59KCkpXG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxvYWRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsXCIpO1xuXG4gICAgLyoqXG4gICAgICogU2VhcmNoXG4gICAgICovXG4gICAgU2VhcmNoZXIuaW5pdCgpO1xuXG4gICAgLyoqXG4gICAgICogc3RhcnQgQmFyQ2hhcnRcbiAgICAgKi9cbiAgICBCYXIuc2V0dGluZ3MgPSB7XG4gICAgICAgIHRpdGxlOiBcIlRvcDEwMCBCYXJDaGFydFwiLFxuICAgICAgICBkZXNjOiBcIlRoaXMgaXMgYSBnb29kIGV4YW1wbGUuXCIsXG4gICAgICAgIGJhcklkOiBcIiNiYXJJZFwiXG4gICAgfVxuICAgIEJhci5pbml0KCk7XG5cbiAgICAvKipcbiAgICAgKiBzdGFydCB0cmVlbWFwXG4gICAgICovXG4gICAgVHJlZW1hcC5zZXR0aW5ncyA9IHtcbiAgICAgICAgdGl0bGU6IFwiVG9wMTAwIHRyZWVtYXBcIixcbiAgICAgICAgZGVzYzogXCJZb3UgY2FuIGNsaWNrIHRoZSBibG9jayB0byB6b29tIGl0LlwiLFxuICAgICAgICB0cmVlbWFwSWQ6IFwiI3NhY2RsVHJlZW1hcFwiXG4gICAgfVxuICAgIFRyZWVtYXAuaW5pdCgpO1xuXG4gICAgZnVuY3Rpb24gc2hvdyh1cmwpIHtcbiAgICAgICAgdmFyIGxvYWRlciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH0sIDMwMCk7XG5cbiAgICAgICAgZDMuanNvbih1cmwsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChsb2FkZXIpO1xuICAgICAgICAgICAgICAgIGxvYWRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwi5Yqg6L295pWw5o2u5aSx6LSl77yM6K+35qOA5p+l5oKo55qE572R57uc6K6+572u44CCXCIpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVXRpbHMuaW5pdChkYXRhKTtcblxuICAgICAgICAgICAgQmFyLnNob3coKTtcbiAgICAgICAgICAgIFRyZWVtYXAuc2hvdygpO1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQobG9hZGVyKTtcbiAgICAgICAgICAgIGxvYWRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTZWFyY2hlci5hZGRMaXN0ZW5lcihmdW5jdGlvbih1cmwpIHtcbiAgICAvLyAgICAgc2hvdyh1cmwpO1xuICAgIC8vIH0pXG5cbiAgICBzaG93KCdodHRwczovL2FwaS5naXRodWIuY29tL3NlYXJjaC9yZXBvc2l0b3JpZXM/cT1iaXRjb2luJyk7XG59KSgpXG4iLCJ2YXIgU2VhcmNoZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVybCA9ICcnLFxuICAgICAgICBiYXNlQXBpVXJsLFxuICAgICAgICBpbnB1dFR4dCxcbiAgICAgICAgc2VhcmNoQnRuLFxuICAgICAgICBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgcXVlcnkgPSB7XG4gICAgICAgICAgICB0eXBlOiAncmVwb3NpdG9yaWVzJyxcbiAgICAgICAgICAgIHE6ICdiaXRjb2luJyxcbiAgICAgICAgICAgIHNvcnQ6IFwic3RhcnNcIixcbiAgICAgICAgICAgIG9yZGVyOiBcImRlc2NcIlxuICAgICAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIGJhc2VBcGlVcmw6ICdodHRwczovL2FwaS5naXRodWIuY29tL3NlYXJjaC8nXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dFR4dCA9IGQzLnNlbGVjdCgnI3NlYXJjaC1pbnB1dCcpO1xuICAgICAgICAgICAgc2VhcmNoQnRuID0gZDMuc2VsZWN0KCcjc2VhcmNoLWJ0bicpO1xuICAgICAgICAgICAgYmFzZUFwaVVybCA9IHRoaXMuc2V0dGluZ3MuYmFzZUFwaVVybDtcblxuICAgICAgICAgICAgc2VhcmNoQnRuLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBhcnNlUXVlcnkoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VRdWVyeSgpIHtcbiAgICAgICAgdmFyIHEgPSBpbnB1dFR4dC5wcm9wZXJ0eSgndmFsdWUnKSB8fCBxdWVyeVsncSddO1xuXG4gICAgICAgIC8vIGZvciAodmFyIGtleSBpbiBxdWVyeSkge1xuICAgICAgICB1cmwgPSBiYXNlQXBpVXJsICsgcXVlcnlbJ3R5cGUnXSArICc/JyArICdxPScgKyBxICsgJyZzb3J0PScgKyBxdWVyeVsnc29ydCddICsgJyZvcmRlcj0nICsgcXVlcnlbJ29yZGVyJ107XG4gICAgICAgIC8vIH07XG4gICAgICAgIGNvbnNvbGUubG9nKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG59KCkpXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
