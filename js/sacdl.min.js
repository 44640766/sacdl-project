var Utils=function(){function e(e,n){for(var a in n)"undefined"==typeof e[a]&&(e[a]=n[a])}var n,a=[];return{init:function(e){n=e},getBarData:function(){var e=this.getTreeData(),n=e.children,a={labels:[],series:[]},r=[];return n.forEach(function(e){a.labels.push(e.name),r.push(e.children.length)}),a.series.push({label:"Projects count",values:r}),a},getTreeData:function(){var r={};if(e(n,{name:"languages",children:[]}),n&&n.items){a=n.items,a.forEach(function(e,n){"undefined"==typeof r[e.language]&&(r[e.language]=n)});for(var t in r){var i={name:t,children:[]};a.forEach(function(e,n){var a={name:e.full_name,watchers_count:e.watchers_count,forks_count:e.forks_count,size:0};e.language===t&&i.children.push(a)}),n.children.push(i)}}return delete n.items,n}}}();
var Searcher=function(){function t(){var t=e.property("value")||c.q;return s=r+c.type+"?q="+t+"&sort="+c.sort+"&order="+c.order,console.log(s),s}var r,e,o,s="",n=[],c={type:"repositories",q:"bitcoin",sort:"stars",order:"desc"};return{settings:{baseApiUrl:"https://api.github.com/search/"},init:function(){e=d3.select("#search-input"),o=d3.select("#search-btn"),r=this.settings.baseApiUrl,o.on("click",function(){t(),n.forEach(function(t){try{t(s)}catch(r){console.log(r)}})})},addListener:function(t){n.push(t)}}}();
var Bar=function(){function t(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)g.push(t.series[r].values[e])}function e(){g=[],a=Utils.getBarData(),i=l*a.series.length,t(a);var e=d3.scale.category20(),r=l*g.length+c*a.labels.length,h=d3.scale.linear().domain([0,d3.max(g)]).range([0,s]),u=d3.scale.linear().range([r+c,0]);n=d3.svg.axis().scale(u).tickFormat("").tickSize(0).orient("left");var f=chart.attr("width",o+s+d).attr("height",r),p=f.selectAll("g").data(g),x=p.enter().append("g").attr("transform",function(t,e){return"translate("+o+","+(e*l+c*(.5+Math.floor(e/a.series.length)))+")"});x.append("rect").attr("fill",function(t,r){return e(r%a.series.length)}).attr("class","bar").attr("width",h).attr("height",l-1),x.append("text").attr("x",function(t){return h(t)-3}).attr("y",l/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),x.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",i/2).attr("dy",".35em").text(function(t,e){return e%a.series.length===0?a.labels[Math.floor(e/a.series.length)]:""}),p.exit().transition().style({opacity:0}).remove(),f.append("g").attr("class","y axis").attr("transform","translate("+o+", "+-c/2+")").call(n);var v=18,b=4,y=f.selectAll(".legend").data(a.series),m=y.enter().append("g").attr("transform",function(t,e){var r=v+b,a=-c/2,n=o+s+40-v,l=e*r-a;return"translate("+n+","+l+")"});m.append("rect").attr("width",v).attr("height",v).style("fill",function(t,r){return e(r)}).style("stroke",function(t,r){return e(r)}),m.append("text").attr("class","legend").attr("x",v+b).attr("y",v-b).text(function(t){return t.label}),y.exit().remove()}var r,a,n,s=300,l=20,i=0,c=10,o=150,d=150,g=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){r=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(r).append("svg:svg").attr("class","chart")},show:function(){e()}}}();
var Treemap=function(){function t(t){c=a=[],c=a=Utils.getTreeData(t);var u=i.nodes(a).filter(function(t){return!t.children}),o=s.selectAll("g").data(u).enter().append("svg:g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return r(c==t.parent?a:t.parent)});o.append("svg:rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return f(t.parent.name)}),o.append("svg:text").attr("x",function(t){return t.dx/2}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name+" "+t.watchers_count}).style("opacity",function(t){return t.w=this.getComputedTextLength(),t.dx>t.w?1:0}),d3.select(window).on("click",function(){r(a)}),d3.select("#treemapSelect").on("change",function(){i.value("watchers"==this.value?e:n).nodes(a),r(c)})}function e(t){return t.watchers_count}function n(t){return t.forks_count}function r(t){var e=u/t.dx,n=o/t.dy;d.domain([t.x,t.x+t.dx]),l.domain([t.y,t.y+t.dy]);var r=s.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+d(t.x)+","+l(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return e*t.dx/2}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return e*t.dx>t.w?1:0}),c=t,d3.event.stopPropagation()}var a,c,i,s,u=970,o=500,d=d3.scale.linear().range([0,u]),l=d3.scale.linear().range([0,o]),f=d3.scale.category20c();return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),i=d3.layout.treemap().round(!1).size([u,o]).sticky(!0).value(function(t){return t.watchers_count}),s=d3.select(t).append("div").attr("class","chart").style("width",u+"px").style("height",o+"px").append("svg:svg").attr("width",u).attr("height",o).append("svg:g").attr("transform","translate(.5,.5)")},show:function(e){t(e)}}}();
!function(){function e(e){var i=setTimeout(function(){t.style.display="block"},300);d3.json(e,function(e,a){e&&(clearTimeout(i),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.init(a),Bar.show(),Treemap.show(),clearTimeout(i),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),e("https://api.github.com/search/repositories?q=bitcoin")}();
//# sourceMappingURL=data:application/json;base64,
